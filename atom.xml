<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>努力向前</title>
  
  <subtitle>寻找你内心的声音，并努力回应它</subtitle>
  <link href="https://greatiga.cn/atom.xml" rel="self"/>
  
  <link href="https://greatiga.cn/"/>
  <updated>2024-04-22T11:19:18.770Z</updated>
  <id>https://greatiga.cn/</id>
  
  <author>
    <name>努力向前</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“努力向前” 网站迁移了！</title>
    <link href="https://greatiga.cn/2024/04/22/%E7%94%9F%E6%B4%BB%E6%84%9F%E8%A8%80/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/"/>
    <id>https://greatiga.cn/2024/04/22/%E7%94%9F%E6%B4%BB%E6%84%9F%E8%A8%80/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB/</id>
    <published>2024-04-22T10:55:32.000Z</published>
    <updated>2024-04-22T11:19:18.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-为什么迁移？"><a href="#1-为什么迁移？" class="headerlink" title="1 为什么迁移？"></a>1 为什么迁移？</h1><blockquote><p>两个主要原因：</p></blockquote><ol><li>原服务器的优惠续费次数已经用完了，如果继续续费将恢复1000+的原价，经济上不划算。</li><li>虽然最近购买了新的服务器，但是新服务器需要用到比博客更重要的业务上。为了保证新服务器的性能，就不把原先的博客迁移过去了。</li></ol><h1 id="2-迁移到哪了？"><a href="#2-迁移到哪了？" class="headerlink" title="2 迁移到哪了？"></a>2 迁移到哪了？</h1><ul><li>Hexo + GitPage 的静态博客的形式。</li><li>原来的域名 “greatiga.cn” 做了域名解析指向了 gitpage 的域名，所以大家还能找到这。</li><li>评论用的 gitalk 插件，需要登录 Github 才能评论。</li></ul><h1 id="3-本博客的今后打算？"><a href="#3-本博客的今后打算？" class="headerlink" title="3 本博客的今后打算？"></a>3 本博客的今后打算？</h1><h2 id="3-1-临时使用"><a href="#3-1-临时使用" class="headerlink" title="3.1 临时使用"></a>3.1 临时使用</h2><ul><li>对于一个爱折腾博客样式的人来说，肯定不满足现有的博客主题。况且，之前那个网站的样式我还挺满意，不忍心这么废除了。</li><li>所以大家现在看到的样式只是临时先用着，之后会考虑更换以及改善访问速度。（gitpage访问肯定是不如之前的）</li></ul><h2 id="3-2-将来会开发新主题"><a href="#3-2-将来会开发新主题" class="headerlink" title="3.2 将来会开发新主题"></a>3.2 将来会开发新主题</h2><ul><li><p>过去都是采用云服务器 + 前后端 + 数据库 + 运维的方式来建站。维护成本高不说，而且博客访问量就这么点，大部分资源是浪费的。</p></li><li><p>因此，将来打算开发一个 Hexo 主题，样式就采用迁移之前的那种 “笔记本风格”。这样一来只要是感兴趣的伙伴就都能用了。</p></li><li><p>不过，上半年估计不会有时间弄了，这事得排队到下半年甚至更久了~</p></li></ul><h2 id="4-结语"><a href="#4-结语" class="headerlink" title="4 结语"></a>4 结语</h2><blockquote><p>做博客三年多，一直都是个潜水小博主，关注的人其实也没多少，很多时候就是自言自语哈哈。<br><strong>但依然很感谢众多来给我留言和加友链的伙伴。</strong><br><strong>感谢大家的支持。很多次要放弃博客时，都会想到还有一群曾经来逛过我网站的伙伴们依然还在坚持，我也就坚持了下来</strong><br><strong>未来也会继续坚持</strong></p></blockquote><blockquote><p>上面说到的开发 hexo 主题会尽力去做的，这是对整个博客圈的微薄贡献，也是对自己学习多年前端的总结</p></blockquote><blockquote><p><strong>努力向前 – greatiga.cn – 我一直在</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-为什么迁移？&quot;&gt;&lt;a href=&quot;#1-为什么迁移？&quot; class=&quot;headerlink&quot; title=&quot;1 为什么迁移？&quot;&gt;&lt;/a&gt;1 为什么迁移？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;两个主要原因：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;l</summary>
      
    
    
    
    <category term="生活感言" scheme="https://greatiga.cn/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E8%A8%80/"/>
    
    
    <category term="Hexo" scheme="https://greatiga.cn/tags/Hexo/"/>
    
    <category term="博客" scheme="https://greatiga.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="建站" scheme="https://greatiga.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>blender的洋面烘焙贴图怎么都一样呢？</title>
    <link href="https://greatiga.cn/2024/04/12/blender/%E6%B4%8B%E9%9D%A2%E7%83%98%E7%84%99%E8%B4%B4%E5%9B%BE%E4%B8%BA%E4%BD%95%E9%83%BD%E4%B8%80%E6%A0%B7/"/>
    <id>https://greatiga.cn/2024/04/12/blender/%E6%B4%8B%E9%9D%A2%E7%83%98%E7%84%99%E8%B4%B4%E5%9B%BE%E4%B8%BA%E4%BD%95%E9%83%BD%E4%B8%80%E6%A0%B7/</id>
    <published>2024-04-12T14:38:32.000Z</published>
    <updated>2024-04-21T08:20:50.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h1><blockquote><p>今天使用blender洋面修改器制作海洋。制作完毕后，准备使用修改器自带的烘焙功能进行贴图烘焙，以节省后续的渲染性能。</p></blockquote><blockquote><p>但是却发现，渲染出来的帧数，结果都一样。</p></blockquote><blockquote><p>并且进一步发现，当前的时间线停留在第几帧，那么渲染出来的所有帧数就都是该帧。</p></blockquote><blockquote><p>这也太离谱了，总不能上百帧，然后一帧一帧的去点击渲染吧？</p></blockquote><span id="more"></span><h1 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h1><h2 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h2><ul><li>怀疑是时间线问题，重新制作所有关键帧 – 不行，依然存在</li><li>怀疑是烘焙结果的保存问题，重新指定贴图保存文件 – 不行，依然如此</li><li>怀疑是内存中存在太多数据发生错误，重新启动blender，甚至重启电脑 – 不行，依然如此</li><li>怀疑是修改器某项参数的问题，测试之后发现了问题所在。</li></ul><h2 id="发现问题点"><a href="#发现问题点" class="headerlink" title="发现问题点"></a>发现问题点</h2><ul><li><p>突然想起来，一开始制作海洋，只使用了洋面修改器的时间功能来做关键帧，这时候的渲染是正常的。</p></li><li><p>但是后来将缩放也加入了动画关键帧，然后问题貌似就有了？</p></li><li><p>马上进行验证，发现果真如此：添加了“缩放”关键帧之后，点击烘焙，烘焙出的贴图明度都和当前帧的明度一样。无论你划定了1-100帧还是多少，所有结果都是当前帧的那幅exr贴图的明度，这就好导致如果你停留在第一帧（也就是没有内容初始化全黑的帧），那么剩下的所有帧都会采用这个“全黑”的明度，结果也都全身黑色的了。</p></li><li><p>删除“缩放”的关键帧后，在此进行烘焙，结果果然正常了。每一帧都是不一样的内容和明度，都是根据海洋实时计算得来的。</p></li><li><p>在波浪层中单独使用翻滚之后，发现翻滚并没有这样的问题。</p></li><li><p>那为什么只有“缩放”存在这样的问题呢？</p></li></ul><h2 id="进一步排查详细原因"><a href="#进一步排查详细原因" class="headerlink" title="进一步排查详细原因"></a>进一步排查详细原因</h2><ul><li>仔细研究贴图，可以发现，贴图的形状及颜色明度，是由洋面修改器各项参数决定的。比如下面几个重点：</li><li>“缩放”值的高低，决定了烘焙出的贴图的明暗，简而言之，缩放值越高那么贴图越明亮，反之越暗直至全黑。</li><li>“时间值”和“翻滚度”决定的是贴图的内容形状。这一点是正常渲染的，每一帧都不一样。</li><li>然而，神奇的是，blender洋面修改器在进行烘焙时，并非实时计算每一帧“缩放值”对应的明度，并非每一帧都给予它正确的明暗。</li><li>相反，blender是直接使用当前时间线所在帧的缩放值大小（也就是当前帧明暗大小），直接套用在最终所有烘焙帧上。这就导致最终结果的所有帧明暗都是一样，没有区分。而如果你刚好停留在时间线第1帧，也就是缩放值为0（明度最低，即全黑），那么最终所有结果都是黑的。相反，如果你停留在结束帧，缩放值为动画中最高值（也就是最明亮），那么所有帧都是最亮的。</li><li>所以说太奇葩了。</li></ul><h1 id="尝试解决问题"><a href="#尝试解决问题" class="headerlink" title="尝试解决问题"></a>尝试解决问题</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;问题发现&quot;&gt;&lt;a href=&quot;#问题发现&quot; class=&quot;headerlink&quot; title=&quot;问题发现&quot;&gt;&lt;/a&gt;问题发现&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天使用blender洋面修改器制作海洋。制作完毕后，准备使用修改器自带的烘焙功能进行贴图烘焙，以节省后续的渲染性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;但是却发现，渲染出来的帧数，结果都一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;并且进一步发现，当前的时间线停留在第几帧，那么渲染出来的所有帧数就都是该帧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这也太离谱了，总不能上百帧，然后一帧一帧的去点击渲染吧？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Blender" scheme="https://greatiga.cn/categories/Blender/"/>
    
    
    <category term="三维建模" scheme="https://greatiga.cn/tags/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="Blender" scheme="https://greatiga.cn/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>大厂前端面经</title>
    <link href="https://greatiga.cn/2021/03/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/bigFactory_1/"/>
    <id>https://greatiga.cn/2021/03/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/bigFactory_1/</id>
    <published>2021-03-31T14:21:47.000Z</published>
    <updated>2022-03-26T01:50:30.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎阅读"><a href="#欢迎阅读" class="headerlink" title="欢迎阅读"></a>欢迎阅读</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>目前已经毕业，在去年2020秋招的摸爬滚打中，侥幸收获了几个小offer。最后也很幸运去腾讯实习了一段时间。所以想着把自己经历的大厂前端面试题整理出来，留给需要找实习工作的童鞋们一个参考。</p></blockquote><h2 id="大厂前端秋招面经"><a href="#大厂前端秋招面经" class="headerlink" title="大厂前端秋招面经"></a>大厂前端秋招面经</h2><blockquote><p>包括腾讯区域研发、字节跳动、腾讯日常实习、小米的前端面经</p></blockquote><span id="more"></span><h2 id="一-腾讯区域研发前端"><a href="#一-腾讯区域研发前端" class="headerlink" title="(一)腾讯区域研发前端"></a>(一)腾讯区域研发前端</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>* 自我介绍<br>* 介绍一下你最难的项目<br>* 谈谈对 vue 和 react 的理解，以及他们的区别<br>* vue 常用指令说一下<br>* 父子组件传值？多个组件共享状态？有什么更好的处理方法？(vuex或者其他状态管理解决方案)<br>* vue-router 用过吗？说一下它常见的钩子函数<br>* vue路由的 hash 和 history 模式？<br>* vue 自定义指令<br>* vue 双向绑定原理<br>* vue 虚拟DOM 的 Diff 算法<br>* 浏览器事件循环机制<br>* node 事件循环机制呢？<br>* nextTick() 是什么任务？(宏任务or微任务？)<br>* 用 node.js 做过什么东西？<br>* websocket 怎么做的聊天服务器<br>* HTTP 和 WebSocket<br>* TCP 三次握手和四次挥手<br>* 常见的网络攻击？(说了 xss, xsrf, sql注入)<br>* 反问</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ul><li>结合自身学习介绍项目</li><li>我有说到发布 npm 包，封装组件，总结反思优化什么的，所以大部分问题都围绕我的介绍来问</li><li>npm 包开发测试到上传的流程</li><li>用 node 做了一个小的聊天服务器</li><li>如何看待 Vue 和 React 这些框架带来的好处？</li><li>模块开发的好处？</li><li>你觉得 element-ui 的哪些组件封装的较好？</li><li>如果让你封装自己的组件应该怎么做？</li><li>面对新的框架和技术你怎么学习？</li><li>你怎么规划未来的前端学习？</li></ul><h3 id="三面HR面"><a href="#三面HR面" class="headerlink" title="三面HR面"></a>三面HR面</h3><ul><li>自我介绍</li><li>为什么打算来这？</li><li>你的期望薪资？</li><li>你在学校做了哪些对自己有意义的事？</li><li>面试官让等待后续，通过的话会打电话或发邮件通知接下来的进展</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>总结下来感觉问题都是交叉的，基础、框架、网络安全、项目都有。二面的时候让自我介绍加项<br>目介绍，后面问题都是围绕你的回答展开。HR面正常回答就好，表现出你想去公司工作的愿望</p></blockquote><h2 id="二-字节跳动前端"><a href="#二-字节跳动前端" class="headerlink" title="(二)字节跳动前端"></a>(二)字节跳动前端</h2><h3 id="一面-1h"><a href="#一面-1h" class="headerlink" title="一面(1h)"></a>一面(1h)</h3><p>* 自我介绍</p><p>* Flex布局，实现两个子元素垂直，并且一个靠右一个靠左</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>css代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">align-items</span>: center;</span><br><span class="line">   <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> green solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>* JS基本数据类型<br>* 闭包<br>* 你说到了作用域链，那么你来谈一下作用域？<br>* 说到了执行上下文，所以又问了执行上下文<br>* 继续深入问到变量提升、词法作用域、动态作用域</p><ul><li>看一点相关的题目吧</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="comment">//ƒ foo()&#123;</span></span><br><span class="line"><span class="comment">//    console.log(&quot;foo&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="string">&#x27;bob&#x27;</span>;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="comment">//tom</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()(); </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="title function_">bar</span>(); </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="comment">//&#123;bar: f&#125;</span></span><br></pre></td></tr></table></figure><p>* http的请求方法<br>* http常见状态码</p><ul><li>TCP 和 UDP区别<br>* 为什么浏览器的请求有两次，一次options，第二次才是真正请求？哪些场景用到<br>* 模拟一个队列<br>* 数组扁平化？至少两种方法实现<br>* 反问</li></ul><h3 id="二面-1h"><a href="#二面-1h" class="headerlink" title="二面(1h)"></a>二面(1h)</h3><p>* 问了项目中的D3.js</p><ul><li>前端展示统计图或者一些复杂的图片是用图片好还是svg生成，这两种方式的优缺点，以及如何做取舍</li><li>最近出了 Vue 3.0,有了解过它与 Vue 2.0 的区别吗？</li><li>Vue 3.0 的 Composition API 有了解吗？<br>* Css画圆有哪些方式？<br>* 如何知道某个dom元素是否在当前可视窗口呢？<br>* scrollTop如何获取？<br>* Css的position的常见属性，sticky用过吗？<br>* Promise说一下<br>* Promise.all用过吗，自己用promise封装一个Promise.all？要求每一个promise能并行执行，并且要保证最后的回调参数顺序与执行顺序一致（解释：每个 promise 封装的请求不一定会按照调用顺序得到响应，可能后面调用的比前面的要快，但一样要保证最后的顺序是按照调用顺序的）<br>* 写一个题吧</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: &#123;b : &#123;c : &#123;<span class="attr">d</span>: <span class="number">3</span>&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">obj, str, defaultValue</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getValue</span>(obj, <span class="string">&#x27;a.b.c.d&#x27;</span>, <span class="number">1</span>) =&gt; <span class="number">3</span> (存在该属性返回该属性对应的值)</span><br><span class="line"></span><br><span class="line"><span class="title function_">getValue</span>(obj, <span class="string">&#x27;a.b.c.d.e&#x27;</span>, <span class="number">1</span>) =&gt; <span class="number">1</span> (出现错误返回传入的默认值)</span><br><span class="line"></span><br><span class="line">改动，能处理数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj_1 = &#123;<span class="attr">a</span>: &#123;b : &#123;c : &#123;<span class="attr">d</span>: [&#123;e : <span class="number">4</span>&#125;]&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getValue</span>(obj_1, <span class="string">&#x27;a.b.c.d[0].e&#x27;</span>, <span class="number">1</span>) =&gt; <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>改动前的代码实现（不一定对，望大家给个建议）</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRightValue</span>(<span class="params">obj, propertyString, defaultValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = propertyString.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(str[i])) &#123;</span><br><span class="line">          obj = obj[str[i]];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> defaultValue;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123;<span class="attr">b</span>: &#123;<span class="attr">c</span>: &#123; <span class="attr">d</span>: <span class="number">3</span> &#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRightValue</span>(obj, <span class="string">&#x27;a.b.c.d&#x27;</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>改动后加上了数组，所以细节要处理好，我当时卡壳了没弄出来</strong></li></ul><p>* 反问</p><h3 id="三面-35min"><a href="#三面-35min" class="headerlink" title="三面(35min)"></a>三面(35min)</h3><ul><li>前两次的面试感觉怎么样？</li><li>通过之前的面试觉得自己还有哪些问题？</li><li>说一下你认为做得好的一个项目，遇到了些什么问题？</li><li>说了一个项目，然后接下来大部分时间都是围绕这个项目交流</li><li>问了自己更偏向于实习还是正式，然后自己回答：优先考虑正式 offer，如果达不到正式批要求，给一个实习 offer 也可以？？哈哈哈我太天真了，，，</li><li>反问了具体的业务，还有自己有待提高的地方</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote><p>因为自己没有实习经历，项目都是自己写的，一下子想不出什么难点，只是简单聊了一些功能实现。所以建议大家以后聊项目时，有好的实习经历，就说一下实习的项目，没有实习只有自己项目的，也要往自己项目里面添加一些亮点（难点）。面试之前也要梳理好自己的项目，不然面试一下想不起来细节就尴尬了，别像我一样，，，呜，，，</p></blockquote><h2 id="三-腾讯日常实习"><a href="#三-腾讯日常实习" class="headerlink" title="(三)腾讯日常实习"></a>(三)腾讯日常实习</h2><h3 id="一面-43min"><a href="#一面-43min" class="headerlink" title="一面(43min)"></a>一面(43min)</h3><ul><li>介绍一下自己的项目</li><li>http 状态码</li><li>TCP 和 UDP</li><li>get 和 post 区别？</li><li>浏览器如何渲染</li><li>进程和线程的区别</li><li>场景题，5种颜色的球，每种颜色球有无数个，每人每次拿两个球，问至少多少人拿，才能保证至少有两个人拿的球一模一样。</li><li>编程题：找出一组数中两两相加为零的所有组合</li><li>说一说快排</li><li>后端能写些什么</li></ul><h3 id="二面-15min"><a href="#二面-15min" class="headerlink" title="二面(15min)"></a>二面(15min)</h3><ul><li>项目中的难点</li><li>聊了一个项目中的部分功能实现</li><li>有合作开发的团队项目吗</li><li>如何调试数据的</li><li>高数学过吗？？？</li><li>线性代数学过吗？说一说用矩阵的知识解方程</li><li>概率论在it中的应用</li><li>什么时候能来实习？实习多久?</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这个日常实习很迷，而且一开始面试就明确说了实习后面不会留。考察比较偏算法和逻辑思维</p></blockquote><h2 id="四-小米前端"><a href="#四-小米前端" class="headerlink" title="(四)小米前端"></a>(四)小米前端</h2><h3 id="一面-30min"><a href="#一面-30min" class="headerlink" title="一面(30min)"></a>一面(30min)</h3><ul><li>自我介绍</li><li>统计字符串字符出现个数</li><li>原型链说一下</li><li>原型继承写一下</li><li>vue怎么通信的</li><li>用类写一个发布订阅者模式</li><li>Css 垂直居中</li><li>vue组件的 data 为什么是一个函数</li><li>http 与 https 区别</li><li>http 304 ?</li><li>说一说你的优势</li><li>说一说自己未来三年规划</li><li>反问</li></ul><h3 id="二面-20min"><a href="#二面-20min" class="headerlink" title="二面(20min)"></a>二面(20min)</h3><ul><li>学习方式？</li><li>项目中的难点</li><li>统计页面标签个数？</li><li>聊了一些经历，对事情的看法</li><li>给面试官看了自己的学习笔记</li><li>自己的优缺点</li><li>反问，</li><li>因为没有实习经历，问了公司项目的大体开发流程。面试官小哥哥很有耐心的概括了一遍。非常感谢！</li><li>问了自己不足的地方</li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><blockquote><p>小米前端的面试整体上来说是比较偏基础的，面试官人也很好。算法题需要掌握一些基础的</p></blockquote><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><blockquote><p>希望这些大厂面经能对你有所帮助，虽说是2020年的秋招，但是万变不离其宗，我想2021年秋招考察的依然是这些 –&gt; 扎实基础 + 基本必须掌握的算法 + 知识的广度与深度。</p></blockquote><blockquote><p>学弟学妹以及万千互联网求职者们，加油！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;欢迎阅读&quot;&gt;&lt;a href=&quot;#欢迎阅读&quot; class=&quot;headerlink&quot; title=&quot;欢迎阅读&quot;&gt;&lt;/a&gt;欢迎阅读&lt;/h2&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目前已经毕业，在去年2020秋招的摸爬滚打中，侥幸收获了几个小offer。最后也很幸运去腾讯实习了一段时间。所以想着把自己经历的大厂前端面试题整理出来，留给需要找实习工作的童鞋们一个参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;大厂前端秋招面经&quot;&gt;&lt;a href=&quot;#大厂前端秋招面经&quot; class=&quot;headerlink&quot; title=&quot;大厂前端秋招面经&quot;&gt;&lt;/a&gt;大厂前端秋招面经&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;包括腾讯区域研发、字节跳动、腾讯日常实习、小米的前端面经&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端面经" scheme="https://greatiga.cn/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="JS 面经" scheme="https://greatiga.cn/tags/JS-%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="大厂面经" scheme="https://greatiga.cn/tags/%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>dom 事件机制</title>
    <link href="https://greatiga.cn/2020/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8/domEvent/"/>
    <id>https://greatiga.cn/2020/09/06/%E6%B5%8F%E8%A7%88%E5%99%A8/domEvent/</id>
    <published>2020-09-06T09:19:06.000Z</published>
    <updated>2020-09-09T02:44:41.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><blockquote><p>这一概念源自于对事件触发对象的思考。例如常见的点击事件，鼠标移动事件。这些事件发生之时，往往不只是点击或者移动到某一特定元素上。</p></blockquote><blockquote><p>比如点击某一个按钮，而它是由上一层的父标签，或许在上一层还有父标签甚至是整个页面。因此点击一个元素可以看成是同时点击了父标签或者整个页面。那么此时事件应该怎么响应到指定标签呢？</p></blockquote><span id="more"></span><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><blockquote><p>即事件从指定元素开始传播到最外层的元素，并且该事件不仅会在指定元素上发生，还会在传播过过程中的每一个元素上发生。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>事件冒泡: button -&gt; div -&gt; body -&gt; html -&gt; document</li></ul><blockquote><p>如上，再点击click之后，事件从 button 开始传播至 html ，再到 documet。这一个过程也称为事件冒泡</p></blockquote><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><blockquote><p>与事件冒泡刚好相反，事件从最外层的 documet 开始一直往里面，直到点击的元素才停止</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>事件冒泡: documet -&gt; html -&gt; body -&gt; div -&gt; button</li></ul><blockquote><p>如上，再点击click之后，事件从 documet 开始传播至 button。这一个过程也称为事件捕获</p></blockquote><h2 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h2><blockquote><p>在上述两种事件确定的方式下，规定了事件处理的三个阶段。事件捕获阶段、处于目标阶段、事件冒泡阶段。同时 DOM明确规定</p></blockquote><ul><li><p>事件捕获阶段不会处理事件</p></li><li><p>处于目标阶段属于冒泡阶段的一部分，并且会触发事件。</p></li><li><p><strong>然而实际上，几乎所有主流浏览器都支持在事件捕获阶段触发事件，它们并没有遵守规定</strong></p></li></ul><h1 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h1><blockquote><p>主要是指 DOM 如何处理各种 HTML 上的程序。</p></blockquote><blockquote><p>对于所有浏览器来说，有两种标准用来操作事件的添加与删除，一种是 DOM2 事件处理程序，一种是 IE 事件处理程序。</p></blockquote><h2 id="DOM2-级事件处理"><a href="#DOM2-级事件处理" class="headerlink" title="DOM2 级事件处理"></a>DOM2 级事件处理</h2><blockquote><p>直接调用该 dom 对象的事件属性，并将相应的执行函数赋予它</p></blockquote><h3 id="addEventListener-和-dom-on-事件-函数"><a href="#addEventListener-和-dom-on-事件-函数" class="headerlink" title="addEventListener() 和 dom.on(事件) &#x3D; 函数"></a>addEventListener() 和 dom.on(事件) &#x3D; 函数</h3><blockquote><p>利用 dom 对象的事件属性直接赋予一个执行函数；利用 addEventListener 添加，并且该方法可以添加多个</p></blockquote><blockquote><p>addEventListener() 有三个参数，参数 1 为事件、参数 2 为执行函数。参数 3 为一个布尔值，false 代表在冒泡阶段执行，true 表示在捕获阶段执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">doc.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h3 id="removeEventListener-和-dom-on-事件-null"><a href="#removeEventListener-和-dom-on-事件-null" class="headerlink" title="removeEventListener() 和 dom.on(事件) &#x3D; null"></a>removeEventListener() 和 dom.on(事件) &#x3D; null</h3><blockquote><p>利用直接设置事件属性为 null 来移出执行函数。利用 removeEventListener() 来移出，但前提是必须给定函数名</p></blockquote><blockquote><p>removeEventListener() 有三个参数，参数 1 为事件、参数 2 为执行函数。参数 3 为一个布尔值，false 代表在冒泡阶段执行，true 表示在捕获阶段执行</p></blockquote><blockquote><p>如下使用匿名函数定义的执行函数无法删除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)<span class="comment">//通过匿名函数定义的</span></span><br><span class="line">doc.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);<span class="comment">//无效</span></span><br><span class="line">doc.<span class="property">onclick</span> = <span class="literal">null</span>;<span class="comment">//有效</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Click</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title class_">Click</span>, <span class="literal">false</span>)<span class="comment">//</span></span><br><span class="line">doc.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title class_">Click</span>, <span class="literal">false</span>);<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><h2 id="IE-级"><a href="#IE-级" class="headerlink" title="IE 级"></a>IE 级</h2><h3 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent()"></a>attachEvent()</h3><blockquote><p>和 DOM 2 级一样用来添加事件，只有两个参数 “事件” 和 “处理函数”，不能设置冒泡或者捕获。因为 IE8 之前那只支持冒泡，所以就只能冒泡</p></blockquote><blockquote><p>同样可以添加多个执行函数</p></blockquote><h3 id="detachEvent"><a href="#detachEvent" class="headerlink" title="detachEvent()"></a>detachEvent()</h3><blockquote><p>和 DOM2 级一样，要删除必须给定函数名作为参数。无法删除通过匿名定义添加的执行函数。</p></blockquote><h3 id="封装跨浏览器的事件处理函数"><a href="#封装跨浏览器的事件处理函数" class="headerlink" title="封装跨浏览器的事件处理函数"></a>封装跨浏览器的事件处理函数</h3><blockquote><p>因为 IE 独树一帜，又因为 IE 属于 windows 用户标配；所以兼容需要考虑。否则代码在 IE 上可能出问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventHandle</span> = &#123;</span><br><span class="line">  <span class="attr">addEvent</span>: <span class="function">(<span class="params">element, type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">      element.<span class="title function_">attachEvent</span>(type, fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">removeEvent</span>: <span class="function">(<span class="params">element, type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">removeEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">      element.<span class="title function_">detachEvent</span>(type, fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">T</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventHandle</span>.<span class="title function_">addEvent</span>(doc, <span class="string">&#x27;click&#x27;</span>, T);</span><br><span class="line"><span class="title class_">EventHandle</span>.<span class="title function_">removeEvent</span>(doc, <span class="string">&#x27;click&#x27;</span>, T);</span><br></pre></td></tr></table></figure><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><blockquote><p>事件对象作为事件发生给予 js 获得相关信息的机会非常重要。程序要根据这些信息作出相应的响应。</p></blockquote><h2 id="DOM-事件对象"><a href="#DOM-事件对象" class="headerlink" title="DOM 事件对象"></a>DOM 事件对象</h2><blockquote><p>必定会传一个 event 对象给执行函数。可以直接作为参数使用。但有两种情况需要注意</p></blockquote><ul><li>通过直接在 html 元素上添加的事件，必须写明参数为 event，响应执行函数也要写明该参数</li><li>通过 addEventListener() 添加的事件，只需要在执行函数上写明参数就行。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;Test(event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;header&#x27;</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">tagName</span>,event.<span class="property">type</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul><li>bubbles  Boolean 表明事件能否冒泡</li><li>cancelable Boolean 是否能取消事件的默认行为</li><li>currentTarget Element 当前事件处理程序正在处理的元素</li><li>defaultPrevented Boolean 为 true 表示调用了 preventDefault()</li><li>eventPhase Integer 1 为捕获阶段 - 2 - 为处于目标阶段 - 3 为冒泡阶段</li><li>preventDefault() 取消事件的默认行为，前提是 cancleable 为 true</li><li>target 事件的目标，就是触发事件的对象</li><li>type 事件类型</li></ul><h3 id="target-与-currentTarget"><a href="#target-与-currentTarget" class="headerlink" title="target 与 currentTarget"></a>target 与 currentTarget</h3><blockquote><p>这里的 currentTarget 是指发生事件时，该事件所绑定的那个元素</p></blockquote><blockquote><p>而 target 从始至终就都是你点击或者移动或者其他触发事件行为的元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;father(event)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;son(event)&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">father</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, event.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">son</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, event.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>看上述这个例子。</p></blockquote><ul><li><p>情况一：点击 button 2；按照事件冒泡那么两个执行函数都会触发</p><ul><li>target: 两个函数的输出值都为 button 2；因为点击的是该元素</li><li>currentTarge: son() 输出的为 button 1；father() 输出为 div</li></ul></li><li><p>情况二：点击 button 1；只会触发 father()</p><ul><li>target: 输出为 button 1；因为就是点击在 button 1 上</li><li>currentTarget：输出为 div；因为该执行函数就绑定在该元素上</li></ul></li><li><p>情况三：点击 div；只触发 father()</p></li><li><p>target 和 currentTarget 都为 div</p></li></ul><blockquote><p>另外，执行函数中的 this 值指向 currentTarget；<strong>但是有个前提，this值要等于 currentTarget,那么必须是在target上或者事件是通过 sddEventListener 添加的。否则通过html元素直接绑定的方式this指向了 window 对象</strong></p></blockquote><h3 id="eventPhase-和-stopPropagation"><a href="#eventPhase-和-stopPropagation" class="headerlink" title="eventPhase 和 stopPropagation"></a>eventPhase 和 stopPropagation</h3><blockquote><p>eventPhase 可以知道事件执行时处于哪个阶段</p></blockquote><blockquote><p>stopPropagation 可以阻值事件继续冒泡传播。我们知道一般事件是在处于目标阶段到冒泡阶段执行的。倘若不阻止冒泡，那么点击一个小按钮，一直回溯到 document。那么整个页面许多地方的点击事件都会触发，很显然我们不想这样。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;father(event)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;son(event)&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">father</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, event.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">son</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, event.<span class="property">currentTarget</span>, event.<span class="property">eventPhase</span>);<span class="comment">//button button 2</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">stopPropagation</span>();<span class="comment">//阻止继续冒泡。这样就不会触发 father 了</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当然该方法同样可以阻止捕获，不过前提是绑定事件时指定他在捕获阶段触发。这样一来就不会继续捕获下去了</p></blockquote><h2 id="IE-事件对象"><a href="#IE-事件对象" class="headerlink" title="IE 事件对象"></a>IE 事件对象</h2><p>为什么不能统一呢，非要学两套</p><blockquote><p>IE 事件对象与 DOM 级有一定差异</p></blockquote><h3 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h3><ul><li>cancelable 默认值为 false，true 为取消冒泡。与 DOM 中 stopPropagation 相似</li><li>returnValue 默认为 true，false 为取消事件默认行为，与 DOM 中 preventDefalut() 相似</li><li>srcElement 事件目标，与 DOM target 相似</li><li>type 事件类型</li></ul><h3 id="event-对象的获取"><a href="#event-对象的获取" class="headerlink" title="event 对象的获取"></a>event 对象的获取</h3><blockquote><p>IE 中的 event 对象时作为 window 对象的一部分存在，可以通过 window.event 来获取</p></blockquote><ul><li>通过文档对象赋值的方法，必须要指定 window.event ，直接使用 event 会报错 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#id&#x27;</span>);</span><br><span class="line">doc.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>);<span class="comment">//event undefined</span></span><br><span class="line">  <span class="keyword">var</span> event = <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>);<span class="comment">//click</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 attachEvent() 添加的可以像 DOM 那样作为参数直接使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doc.<span class="title function_">attachEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>);<span class="comment">//click</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>执行函数中关于事件元素的信息都可以通过 event 获取，虽然 this 值有时也会等于 event 的部分属性。但是建议用 event，因为 this 的指向取决于外部执行环境，不能保证得到想要的值。</p></blockquote><blockquote><p><strong>另外，IE 要没了。取而代之的是微软新浏览器 Edge ，这个浏览器好像已经统一了 DOM级规定的事件处理。原来 IE 的那些特有事件处理已经没有了</strong></p></blockquote><h1 id="事件Type"><a href="#事件Type" class="headerlink" title="事件Type"></a>事件Type</h1><blockquote><p>常见的事件类型</p></blockquote><h2 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h2><blockquote><p>界面发生的事件</p></blockquote><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><blockquote><p>当页面完全加载，包括所有图像、js 文件、产生式文件等外部资源。之后就会触发该事件。<strong>添加事件的方法？建议使用之前写的跨浏览器事件处理方法。当然也可以通过获取 dom 对象，并对其属性赋值，也可以直接在 html 元素上绑定。但是这两个方法下的 event 对象的使用有区别，特别是在 IE 浏览器上</strong></p></blockquote><ul><li>在 window对象下触发整个页面的加载；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;加载完毕&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>用来加载图片</li></ul><blockquote><p>绑定事件后，设置 img 的 src 即刻加载。可以用来做图片的预加载。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">image.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;图像加载完毕&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;页面加载完毕，开始加载图像&#x27;</span>);</span><br><span class="line">  image.<span class="property">src</span> = <span class="string">`https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1599126757461&amp;di=2d244dfca72c7e4c96e533c37d520b43&amp;imgtype=0&amp;src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201307%2F25%2F201849gw2fgom557bg25jz.jpg`</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>用来加载 js 外部文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> js = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">js.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;js加载完毕&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;页面加载完毕，开始加载js&#x27;</span>);</span><br><span class="line">  js.<span class="property">src</span> = <span class="string">`./xxx.js`</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="unload-事件"><a href="#unload-事件" class="headerlink" title="unload 事件"></a>unload 事件</h3><blockquote><p>与 load 事件相反，一般页面切换后触发，可用来强制的引用清除，防止内存泄漏</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unload&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>, <span class="string">&#x27;跳转了&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="resize-事件"><a href="#resize-事件" class="headerlink" title="resize 事件"></a>resize 事件</h3><blockquote><p>当页面大小发生改变时触发，可以用此来获取一些窗口属性，用来做响应式开发。但是大小改变检测很灵敏，所以需要做防抖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大小改变&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="scroll-事件"><a href="#scroll-事件" class="headerlink" title="scroll 事件"></a>scroll 事件</h3><p><strong>scrollLeft 和 scrollTop</strong></p><blockquote><p>这是存在于 document 上的两个属性，分别代表滚动条已经滚动的高度和宽度。他们与 clientWidth 、clienHeight一样都是页面视口的属性，并非整个浏览器创口属性。</p></blockquote><blockquote><p>该事件是在 window 对象上发生的，与 scrollTop，scrollLeft 有关。监听该事件可以用来做导航栏的变化，同样要做防抖，否则容易卡顿</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;滚动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>, <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><blockquote><p>焦点一般只鼠标的焦点，虽然可以检测鼠标事件来监控，但是焦点可以通过键盘移动所以有专门的事件监控。焦点事件标准不一，但是 DOM3 统一了一个标准并且规定了它的发生顺序</p></blockquote><blockquote><p>当一个元素移动到另一个元素会依次触发以下事件;一般 blur 与 focus 常见</p></blockquote><ul><li>focusout 在失去焦点元素上触发，会冒泡</li><li>focusin 在获取焦点元素上触发，会冒泡</li><li>blur 在失去元素上触发，不会冒泡</li><li>DOMFocusOut 在失去焦点元素上触发，会冒泡; Opera 专有</li><li>focus 在获取焦点元素上触发，不会冒泡</li><li>DOMFocusIn 在获取焦点元素上触发，会冒泡; Opera 专有</li></ul><h2 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h2><h3 id="鼠标点击与移动"><a href="#鼠标点击与移动" class="headerlink" title="鼠标点击与移动"></a>鼠标点击与移动</h3><blockquote><p>主要是点击、双击、光标移入、移出、暗下、放开的操作；</p></blockquote><ul><li>mouseenter 首次移入元素内部触发，不冒泡</li><li>mouseleave ，移出元素触发，不冒泡</li><li>mousemove 在元素内重复移动触发</li><li>mouseout 移入另一个元素触发</li><li>mousedown 按下鼠标触发</li><li>mouseup 释放鼠标按键触发</li><li>click 点击，只有按下事件和放开事件发生后才会触发，只是按下不会触发</li><li>dblclick 双击，当且仅当连续两次 click 时触发</li></ul><blockquote><p>触发顺序：</p></blockquote><ul><li>mousedown</li><li>mouseup</li><li>click &#x2F;&#x2F;一次点击</li><li>mousedown</li><li>mouseup</li><li>click &#x2F;&#x2F;二次点击</li><li>dblclick &#x2F;&#x2F;触发双击</li></ul><blockquote><p>一般可以用于轮播图或者自动播放，当鼠标移入将其停止，移出又自动播放</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;暂停&#x27;</span>)&#125; )</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>)&#125; )</span><br></pre></td></tr></table></figure><h3 id="滚轮"><a href="#滚轮" class="headerlink" title="滚轮"></a>滚轮</h3><ul><li>mousewheel</li></ul><blockquote><p>可用于获取该事件发送时鼠标属性，在任何元素上通过鼠标滚动即可触发。可以检测页面滚动是否来自鼠标。该事件冒泡。</p></blockquote><h3 id="触摸屏"><a href="#触摸屏" class="headerlink" title="触摸屏"></a>触摸屏</h3><blockquote><p>上述事件在移动端上又有所不同</p></blockquote><ul><li>并不支持 dblclick ，双击只会放大</li><li>轻击不可单击或者没有绑定 click 的元素什么事件也不会发生</li><li>在可点击或者绑定 click 的前提下点击会触发 mousemove 。若该事件改变了内容将不会在发生其他事件，否则可以发生 down、up、click 事件</li><li>mousemove 也会触发 mouseenter 和 mouseout</li><li>手指滚动页面时会触发 mousewheel 和 scroll 事件</li></ul><h2 id="键盘和文本事件"><a href="#键盘和文本事件" class="headerlink" title="键盘和文本事件"></a>键盘和文本事件</h2><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><ul><li>keydown 敲击任意键时触发，若按住不放则不断触发</li><li>keypress 敲击字符健时触发，若按住不放则不断触发</li><li>keyup 释放键盘触发</li></ul><blockquote><p>按下字符键时依次触发 keydown -&gt; keypress -&gt; keyup<br>按下非字符键时依次触发 keydown -&gt; keyup</p></blockquote><blockquote><p>另外发生 keydown 和 keyup 时，也可以通过 event 对象获取相应的键值(ASCII码值)。keyCode</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="textInput-事件"><a href="#textInput-事件" class="headerlink" title="textInput 事件"></a>textInput 事件</h3><blockquote><p>触发条件</p></blockquote><ul><li>必须在可编辑区编辑</li><li>输入实际字符的键，不会包括删除、退格键等等</li></ul><blockquote><p>可以通过 event.data 获得键盘实际输入值而非 ASCII 码值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;textInput&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h2><blockquote><p>设备事件不是值页面内的事件，而是移动设备本身事件，比如翻转、是否走动。目前的草案中有四种类型事件</p></blockquote><ul><li><p>orientationchange ，苹果给 safari 添加的事件用来检测设备从横向观察模式到纵向观察模式。</p></li><li><p>它的值存在于 window.orientation 中。0 为纵向、90 为向左旋转、-90 为向右旋转</p></li><li><p>MozOrientation ，firefox 未检测设备而引入，依靠 event 的 x,y,z 来确定方向。该事件可能被替代</p></li><li><p>deviceorientation</p></li><li><p>devicemotion</p></li></ul><h2 id="触摸与手势事件"><a href="#触摸与手势事件" class="headerlink" title="触摸与手势事件"></a>触摸与手势事件</h2><blockquote><p>这一类事件是移动设备的事件核心</p></blockquote><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><ul><li>touchstart 手指触摸屏幕触发</li><li>touchmove 手指在屏幕上连续滑动触发。可以调用 preventDefault() 来阻值滑动</li><li>touchend 手指离开屏幕</li><li>touchcancel 系统停止跟踪触发</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这一概念源自于对事件触发对象的思考。例如常见的点击事件，鼠标移动事件。这些事件发生之时，往往不只是点击或者移动到某一特定元素上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;比如点击某一个按钮，而它是由上一层的父标签，或许在上一层还有父标签甚至是整个页面。因此点击一个元素可以看成是同时点击了父标签或者整个页面。那么此时事件应该怎么响应到指定标签呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器BOM核心</title>
    <link href="https://greatiga.cn/2020/07/20/%E6%B5%8F%E8%A7%88%E5%99%A8/bomCore/"/>
    <id>https://greatiga.cn/2020/07/20/%E6%B5%8F%E8%A7%88%E5%99%A8/bomCore/</id>
    <published>2020-07-20T00:21:00.000Z</published>
    <updated>2020-09-08T13:31:28.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h1><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><blockquote><p>这个不用多讲，前面已经接触过，所有在全局作用域定义的变量都会被当做 window 对象的属性，同时 Global 对象也是基于 window 对象的。</p></blockquote><blockquote><p>需要注意的是，一般定义变量时，这个变量的四个数据属性都默认为 true（这个前面面向对象那里讲过），所以都是可以删除或者修改的。<strong>可是不一样的地方就在全局作用域，在此作用域下定义的变量的数据属性之一 [[Configurable]]</strong>默认为 false，这就导致无法删除，强行使用 delete 是无效的，在 IE9 之前的浏览器中还会报错</p></blockquote><span id="more"></span><blockquote><p>总结来说，全局作用域定义的变量无法删除，但是在 window对象及其名下的所有对象中定义的变量是可以删除的。</p></blockquote><h2 id="窗口关系和框架"><a href="#窗口关系和框架" class="headerlink" title="窗口关系和框架"></a>窗口关系和框架</h2><blockquote><p>这里主要是值网页中打开网页用到的框架 frame</p></blockquote><ul><li>每一个 frame 框架都拥有自己的 window 对象</li><li>每一个 frame 框架都保存在 frame 集合中，可以通过索引或者框架名字访问该框架的 window 对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frameset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如上述可通过 window.frames[0] 或者 window.frames[“1”] 来访问</li></ul><h3 id="top对象"><a href="#top对象" class="headerlink" title="top对象"></a>top对象</h3><blockquote><p>不过建议使用 top 对象，因为 top 对象始终指向最外层框架也就是浏览器窗口，这样可以保证访问到正确的 frame</p></blockquote><ul><li>例如 top.frames[0] 或者 top.frames[“1”]</li></ul><h3 id="parent对象"><a href="#parent对象" class="headerlink" title="parent对象"></a>parent对象</h3><blockquote><p>直接指向本层框架的上层框架</p></blockquote><ul><li>有的时候可能等于 top</li><li>在没有框架时始终等于 top，它与 top 也同时等于 window</li></ul><h2 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h2><blockquote><p>指的是浏览器相对于屏幕的位置</p></blockquote><h3 id="screenLeft-与-screenTop"><a href="#screenLeft-与-screenTop" class="headerlink" title="screenLeft 与 screenTop"></a>screenLeft 与 screenTop</h3><blockquote><p>分别代表浏览器窗口相对于屏幕左边的距离和上边的距离</p></blockquote><ul><li>IE、Safari、Opera、Chrome 都支持该属性，作用相同</li><li>Firefox并不支持</li></ul><h3 id="screenX-与-screenY"><a href="#screenX-与-screenY" class="headerlink" title="screenX 与 screenY"></a>screenX 与 screenY</h3><blockquote><p>分别代表浏览器窗口相对于屏幕左边的距离和上边的距离</p></blockquote><ul><li>Firefox、Safari、Chrome 都支持</li><li>Opera虽然支持这两个属性，但是与上述的 screenLeft 与 screenTop 并不对应，不建议使用在 Opera 中</li></ul><h3 id="关于边距的问题"><a href="#关于边距的问题" class="headerlink" title="关于边距的问题"></a>关于边距的问题</h3><ul><li>在 IE、Opera 中，screenTop 保存的是最外层 window 对象可见页面的边距，这就导致即使浏览器紧贴屏幕，那么返回的距顶部距离不会是零而是工具栏高度，因为浏览器工具栏不算可见页面。</li><li>在 Chrome、Firefox、Safari 中，screenX 或者 screenTop 保存的就是窗口距屏幕的位置，将工具栏也包括在里面</li></ul><blockquote><p>总结，并不是每个浏览器都支持上述方法，另外一点，对于距顶部的距离，有两类情况，一类浏览器认为应该从整个浏览器窗口最外面算起，另一类则认为应该从浏览器中可见页面的边框算起。所以在使用时最好先判断浏览器是否支持在决定取哪一个值（Left和Top或者X和Y）</p></blockquote><h3 id="moveTo-和-moveBy"><a href="#moveTo-和-moveBy" class="headerlink" title="moveTo() 和 moveBy()"></a>moveTo() 和 moveBy()</h3><blockquote><p>都接受两个参数</p></blockquote><ul><li>moveTo(x,y) 表示直接移动到某个坐标(x,y)</li><li>moveBy(x,y) 表示在水平 y 和垂直 x 方向上移动的像素，x 为负代表往左，反正往右；y 为负代表往上，反正往下。</li><li>两个方法只适用于最外层 window 对象</li></ul><h2 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h2><blockquote><p>包括四个基本属性</p></blockquote><ul><li>innerWidth 和 innerHeight 分别浏览器内页面大小，不算边框和工具栏</li><li>outerWidth 和 outerHeight 分别为浏览器窗口大小，算边框工具栏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>,<span class="variable language_">window</span>.<span class="property">innerHeight</span>);<span class="comment">//1054 722</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>,<span class="variable language_">window</span>.<span class="property">outerHeight</span>);<span class="comment">//1536 824</span></span><br></pre></td></tr></table></figure><h3 id="clientWidth-和-clientHeight"><a href="#clientWidth-和-clientHeight" class="headerlink" title="clientWidth 和 clientHeight"></a>clientWidth 和 clientHeight</h3><blockquote><p>在标准模式下有效，所以浏览器都支持</p></blockquote><ul><li>document.documentElement.clientWidth，页面宽度</li><li>document.documentElement.clientHeight，页面高度</li></ul><blockquote><p>混杂模式下必须使用 body 来获取，部分移动浏览器也只能用这种方式获取</p></blockquote><ul><li>document.body.clientWidth，页面宽度</li><li>document.body.clientHeight，页面高度</li></ul><blockquote><p><strong>浏览器实现标准不一，模式也不一定统一，还要考虑移动浏览器兼容，所以建议使用前做判断是否存在这个值，没有就换个属性，反正主要就上面两种方式</strong></p></blockquote><blockquote><p>也可以通过 compatMode 来判断属于那种模式，然后在决定使用哪个属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">compatMode</span> == <span class="string">&#x27;CSS1Compat&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标准模式&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;混杂模式&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>,<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标准模式</span></span><br><span class="line"><span class="comment">//1054 722</span></span><br></pre></td></tr></table></figure><h3 id="reszieTo-和-resizeBy"><a href="#reszieTo-和-resizeBy" class="headerlink" title="reszieTo() 和 resizeBy()"></a>reszieTo() 和 resizeBy()</h3><blockquote><p>都接受两个参数</p></blockquote><ul><li>reszieTo(x,y) 表示直接改变窗口大小为 x,y</li><li>resizeBy(x,y) 表示在水平 y 和垂直 x 方向改变多少个像素</li><li>与之前的 move 方法类似，但是可能被禁用，比如 Opera 和 IE7+ 就直接禁用了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="string">&quot;Baidu&quot;</span>,<span class="string">&quot;height=600,width=300&quot;</span>);</span><br><span class="line">w.<span class="title function_">resizeTo</span>(<span class="number">300</span>,<span class="number">600</span>);</span><br><span class="line">w.<span class="title function_">resizeBy</span>(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">w.<span class="title function_">moveTo</span>(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">w.<span class="title function_">moveBy</span>(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//将会在屏幕中间位置打开一个长方形大小的窗口</span></span><br></pre></td></tr></table></figure><h2 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h2><h3 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h3><blockquote><p>window对象中最为常见的方法，在JS代码里面打开网页的最常见的方法。三个参数；</p></blockquote><ul><li>参数1：目标网页的url，要遵循计算机网络规定的 URI 格式，不能只填域名，至少有协议与地址</li><li>参数2：指定打开窗口的名字，如果该名字存在，就在已存在的窗口或者框架打开。否则就创建一个新窗口并命名指定的名字</li><li>参数3：规定新打开窗口的属性，比如宽高、位置、是否可以拖动浏览器等等，具体参数用时请查表</li></ul><blockquote><p>注意，</p></blockquote><ul><li>参数都为空的情况下，默认打开空白页；</li><li>只有参数1或者参数1和参数2同时存在时，那么会打开指定目标窗口，并默认拥有工具栏、地址栏等；</li><li>但是<strong>指定了参数3就必须指定参数2，如果参数1后面紧跟参数3那么打开的新网页只会是默认样式，你再参数3里面定义的参数是无效的</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="string">&quot;Baidu&quot;</span>,<span class="string">&quot;width=300,height=200&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><blockquote><p>仅仅限于用 window.open() 打开的新网页，浏览器的主窗口是无法用代码关闭的，必须由人自己关闭</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="string">&quot;Baidu&quot;</span>,<span class="string">&quot;width=300,height=200&quot;</span>);</span><br><span class="line">w.<span class="title function_">close</span>();</span><br><span class="line"><span class="comment">//关闭新打开的网页</span></span><br></pre></td></tr></table></figure><h3 id="opener"><a href="#opener" class="headerlink" title="opener"></a>opener</h3><blockquote><p>该属性是用来确定是否用单独线程运行新网页，设置后即表示打开的网页用新进程运行，无需与其他页面（window对象）互相通信，一旦设置就无法恢复了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="string">&quot;Baidu&quot;</span>,<span class="string">&quot;width=300,height=200&quot;</span>);</span><br><span class="line">w.<span class="property">opener</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//关闭新打开的网页</span></span><br></pre></td></tr></table></figure><h3 id="安全限制"><a href="#安全限制" class="headerlink" title="安全限制"></a>安全限制</h3><blockquote><p>由于打开新网页是如此简单，所以不免有人设置程序，短时间内自动打开许多广告页面，所以许多浏览器都做了限制</p></blockquote><ul><li>比如 IE 不允许弹出的窗口随意拖动至浏览器外，不允许关闭状态栏</li><li>比如 Firefox 会强制在弹出窗口中显示地址栏</li><li>另外的浏览器甚至规定，在一个页面尚未加载完成时，不允许执行 window.open() 语句，只能通过单击某个浏览器提供的按钮或者敲键盘打开</li></ul><blockquote><p>当然也可以为自己的浏览器安装弹窗屏蔽插件</p></blockquote><h2 id="超时调用和间歇调用"><a href="#超时调用和间歇调用" class="headerlink" title="超时调用和间歇调用"></a>超时调用和间歇调用</h2><h3 id="超时调用-setTimeout"><a href="#超时调用-setTimeout" class="headerlink" title="超时调用 setTimeout()"></a>超时调用 setTimeout()</h3><blockquote><p>两个参数，参数1位执行代码，使用函数比较好；参数2位延迟时间；</p></blockquote><ul><li>使用 **clearTimeout() 可以清除</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h2&gt;Hello World!&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">if</span>(t) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;提前清除&quot;</span>);<span class="comment">//1s 后输出</span></span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭新打开的网页</span></span><br></pre></td></tr></table></figure><h3 id="间歇调用-setInterval"><a href="#间歇调用-setInterval" class="headerlink" title="间歇调用 setInterval()"></a>间歇调用 setInterval()</h3><blockquote><p>参数与超时调用一样，只不过他是每过一段时间就执行一次，直至清除或者页面关闭</p></blockquote><ul><li>使用 <strong>clearInterval()</strong> 来清除</li></ul><h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><blockquote><p>三大方法 alert() confirm() prompt()</p></blockquote><h3 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h3><blockquote><p>跳出弹框显示信息，一般只有确定按钮，用户只能查看信息不能做其他请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h3><blockquote><p>跳出弹框信息，并且有确定和关闭两个按钮，点击之后分别会返回 true 和 false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&quot;你确定要删除吗？&quot;</span>)) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;取消删除&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h3><blockquote><p>除了 OK 和 Cancel 按钮之外，可以提供文本域。点击关闭会返回 null，点击OK则会返回文本域内容；</p></blockquote><blockquote><p>该方法接受两个参数，参数1为提示文本，参数二为文本域默认值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="title function_">prompt</span>(<span class="string">&quot;请输入邮箱&quot;</span>,<span class="string">&quot;Email&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(re !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;您的邮箱为：&quot;</span> + re);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;您取消了输入&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h2><blockquote><p>window 对象还可以控制滚动条的滚动，可以用来做回到顶部效果</p></blockquote><h3 id="scrollBy"><a href="#scrollBy" class="headerlink" title="scrollBy()"></a>scrollBy()</h3><blockquote><p>指定滚动多少像素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">300</span>);<span class="comment">//向下滚动300像素</span></span><br></pre></td></tr></table></figure><h3 id="scrollTo"><a href="#scrollTo" class="headerlink" title="scrollTo()"></a>scrollTo()</h3><blockquote><p>指定滚动到什么坐标</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">0</span>, <span class="number">500</span>);<span class="comment">//滚动到坐标（0,300）的位置</span></span><br></pre></td></tr></table></figure><h1 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h1><blockquote><p>主要用来保存 URL 中的各项参数信息，比如地址，协议，端口，查询字符串等等；当然该对象也可以直接修改这些参数</p></blockquote><blockquote><p>它既是 window 对象的一部分，也是 document 对象的一部分</p></blockquote><ul><li>hash -&gt; #号键后面的字符</li><li>host -&gt; 包括服务器地址和端口</li><li>hostname -&gt; 服务器地址</li><li>port -&gt; 端口</li><li>pathname -&gt; 文件路径 &#x2F;one&#x2F;two</li><li>protocol -&gt; 协议</li><li>search -&gt; 查询字符串</li></ul><blockquote><p>以博主个人博客页面为例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://www.tzwlink.xyz/detialsart?artId=13002</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;协议：&quot;</span>,location.<span class="property">protocol</span>);<span class="comment">//http:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器地址：&quot;</span>,location.<span class="property">hostname</span>);<span class="comment">//www.tzwlink.xyz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;端口：&quot;</span>,location.<span class="property">port</span>);<span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件路径：&quot;</span>,location.<span class="property">pathname</span>);<span class="comment">///detialsart</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询参数：&quot;</span>,location.<span class="property">search</span>);<span class="comment">//?artId=13002</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hash参数&quot;</span>,location.<span class="property">hash</span>);<span class="comment">//</span></span><br></pre></td></tr></table></figure><blockquote><p>当然对于查询参数较多的情况可以自己编写函数来分解，因为上述的 search 属性是返回拼接后的所有字符串</p></blockquote><h2 id="用来查询"><a href="#用来查询" class="headerlink" title="用来查询"></a>用来查询</h2><blockquote><p>下面例子获取百度热搜榜第一的各项查询参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = location.<span class="property">search</span> ? location.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> list = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数名\t参数内容&quot;</span>);</span><br><span class="line">query.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span> &#123;</span><br><span class="line">  list = item.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(list[<span class="number">0</span>]) + <span class="string">&quot;\t\t&quot;</span> + <span class="built_in">decodeURIComponent</span>(list[<span class="number">1</span>]));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数名参数内容</span></span><br><span class="line"><span class="comment">// cl3</span></span><br><span class="line"><span class="comment">// tnbaidutop10</span></span><br><span class="line"><span class="comment">// frtop1000</span></span><br><span class="line"><span class="comment">// wd黄河出现2020年第2号洪水</span></span><br><span class="line"><span class="comment">// rsv_idx2</span></span><br><span class="line"><span class="comment">// rsv_dlfyb_n_homepage</span></span><br><span class="line"><span class="comment">// hisfilter1</span></span><br></pre></td></tr></table></figure><h2 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h2><h3 id="改变-URL-来打开新页面"><a href="#改变-URL-来打开新页面" class="headerlink" title="改变 URL 来打开新页面"></a>改变 URL 来打开新页面</h3><ul><li>location.assign() 方法</li><li>location.href</li><li>window.location</li></ul><blockquote><p>上述第一个方法传入新的 url 作为参数，其余两个则是赋值；最终效果一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">assign</span>(<span class="string">&quot;http://www.tzwlink.xyz/&quot;</span>);</span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;http://www.tzwlink.xyz/&quot;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;http://www.tzwlink.xyz/&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="改变-URL-的参数来重定向"><a href="#改变-URL-的参数来重定向" class="headerlink" title="改变 URL 的参数来重定向"></a>改变 URL 的参数来重定向</h3><blockquote><p>凡是修改除 hash 以外的参数都可以重新加载到修改后的页面，每修改一次就会刷新</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原始地址为 http://www.tzwlink.xyz/</span></span><br><span class="line">location.<span class="property">pathname</span> = <span class="string">&quot;detialsart&quot;</span>;</span><br><span class="line"><span class="comment">//跳转至 http://www.tzwlink.xyz/detialsart</span></span><br><span class="line">location.<span class="property">search</span> = <span class="string">&quot;?artId=13001&quot;</span>;</span><br><span class="line"><span class="comment">//跳转至 http://www.tzwlink.xyz/detialsart?artId=13001</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><blockquote><p>这个与 String 里面的那个不同，这个是 location 所具有的。</p></blockquote><blockquote><p>浏览器每一次跳转，历史记录都会记录，这样点击返回就能回到之前的页面。但是该方法可以不再历史记录中记录，也就导致不能返回至上一个页面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">replace</span>(<span class="string">&quot;http://www.tzwlink.xyz/&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="reload"><a href="#reload" class="headerlink" title="reload()"></a>reload()</h3><blockquote><p>重新加载页面</p></blockquote><ul><li>location.reload() 重新加载，从缓存中</li><li>location.reload(true) 重新加载，从服务器</li></ul><h1 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h1><blockquote><p>暂时跳过</p></blockquote><h1 id="screen-对象"><a href="#screen-对象" class="headerlink" title="screen 对象"></a>screen 对象</h1><blockquote><p>用处不大，暂时跳过</p></blockquote><h1 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h1><blockquote><p>记录着用户上网的记录，但是具体访问过哪些网址，对于开发人员也是屏蔽的，但可以通过一些方法来操作</p></blockquote><h2 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h2><blockquote><p>负数为后退几页，正数为前进几页</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">go</span>(-<span class="number">2</span>);<span class="comment">//后退两页</span></span><br><span class="line">history.<span class="title function_">go</span>(<span class="number">1</span>);<span class="comment">//前进一页</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以是传入 URL，它会根据最近访问这个 URL 的时间来跳转，如果没有该方法不执行</p></blockquote><h2 id="back-和-forward"><a href="#back-和-forward" class="headerlink" title="back() 和 forward()"></a>back() 和 forward()</h2><blockquote><p>前几一页，后退一页</p></blockquote><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><blockquote><p>该属性如果长度为0则代表是直接打开这个页面的</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;window-对象&quot;&gt;&lt;a href=&quot;#window-对象&quot; class=&quot;headerlink&quot; title=&quot;window 对象&quot;&gt;&lt;/a&gt;window 对象&lt;/h1&gt;&lt;h2 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域&quot;&gt;&lt;/a&gt;全局作用域&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这个不用多讲，前面已经接触过，所有在全局作用域定义的变量都会被当做 window 对象的属性，同时 Global 对象也是基于 window 对象的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，一般定义变量时，这个变量的四个数据属性都默认为 true（这个前面面向对象那里讲过），所以都是可以删除或者修改的。&lt;strong&gt;可是不一样的地方就在全局作用域，在此作用域下定义的变量的数据属性之一 [[Configurable]]&lt;/strong&gt;默认为 false，这就导致无法删除，强行使用 delete 是无效的，在 IE9 之前的浏览器中还会报错&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="浏览器" scheme="https://greatiga.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="BOM" scheme="https://greatiga.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/BOM/"/>
    
    
    <category term="window对象" scheme="https://greatiga.cn/tags/window%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的程序设计--继承</title>
    <link href="https://greatiga.cn/2020/07/17/JavaScript/inheritance/"/>
    <id>https://greatiga.cn/2020/07/17/JavaScript/inheritance/</id>
    <published>2020-07-17T12:22:00.000Z</published>
    <updated>2020-07-22T02:30:50.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><blockquote><p>在接触了作用域链，对象，构造函数，原型之后。就可以猜想，在解析属性时，对象可以像作用域链那样从自己开始一直找到原型，那么原型是否也可以层层嵌套，形成一个类似作用域链的东西，答案是肯定的</p></blockquote><span id="more"></span><blockquote><p>一个对象既然可以指向原型对象，那么构造函数同样可以，反正都是对象指对象；那么可以这么理解，让一个构造函数的 prototype 作为另一个构造函数的实例，这样不就可以指向另一个原型对象了嘛，然后用该构造函数创建一个实例，那么该实例的原型里必有一个属性用来指向更高一层的原型，这样以来，这个实例对象可以访问两个原型对象。依次类推，层层嵌套，最往后的实例对象越是能访问之前的原型，构成了一条原型链。</p></blockquote><p>一般这样创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="keyword">if</span>(name.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Great&#x27;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">getAge</span>(),s1.<span class="title function_">getName</span>());<span class="comment">//21 &quot;Great&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">getAge</span>(),s2.<span class="title function_">getName</span>());<span class="comment">//20 &quot;default&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">constructor</span>);</span><br><span class="line"><span class="comment">// ƒ Father() &#123;</span></span><br><span class="line"><span class="comment">//   this.name = &#x27;default&#x27;;</span></span><br><span class="line"><span class="comment">//   Father.prototype.getName = function() &#123;</span></span><br><span class="line"><span class="comment">//     return this.name;</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">constructor</span>);</span><br><span class="line"><span class="comment">// ƒ Father() &#123;</span></span><br><span class="line"><span class="comment">//   this.name = &#x27;default&#x27;;</span></span><br><span class="line"><span class="comment">//   Father.prototype.getName = function() &#123;</span></span><br><span class="line"><span class="comment">//     return this.name;</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过上面的例子可以看到</p></blockquote><ul><li>由子构造函数创建的实例可以共享父构造函数的方法及属性，同时也能添加自己的属性与方法</li><li>可以看到两个构造函数的原型属性 constructor 都指向了父构造函数，为什么呢？</li></ul><blockquote><p>前面学过，凡是函数，创建时都会有 prototype 指向原型对象，默认情况下原型的 constructor 都指回关联的构造函数；然而上面例子中， Son 的原型没有使用默认的，而是重写了原型对象，这样一来 constructor 属性就没了，所以解析器在 Son 的原型里找不到这个属性，只能顺着原型链往上找到了 Father 原型中的 constructor ，所以 Son 的原型也指向了 Father</p></blockquote><ul><li>在 Son 中有一个 name 属性的判断，有就赋值，没有就用父类给的默认的。综合这里与上一条所述，再次说明实例对象的属性是按着 对象本身 -&gt; 原型链来找的。</li></ul><h2 id="默认原型"><a href="#默认原型" class="headerlink" title="默认原型"></a>默认原型</h2><blockquote><p>之前学过，每一个引用类型都是从 Object 来的，所以继承了它所有的属性与方法；所以每一个引用类型都是 Object 的一个实例，所以默认都会继承它。</p></blockquote><h2 id="确定关系"><a href="#确定关系" class="headerlink" title="确定关系"></a>确定关系</h2><blockquote><p>通过 <strong>instanceof</strong> 操作符判断属于哪个类型</p></blockquote><blockquote><p><strong>prototype.isPrototypeOf()</strong> 也可以判断是否属于某个类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="keyword">if</span>(name.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Great&#x27;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 <span class="keyword">instanceof</span> <span class="title class_">Son</span>, <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(s1));<span class="comment">//true true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 <span class="keyword">instanceof</span> <span class="title class_">Father</span>, <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(s1));<span class="comment">//true true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>, <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(s1));<span class="comment">//true true</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>单独使用原型链也是不妥的，因为继承往往是通过将原型作为实例来做到的，这也导致继承的原型里面也包括了父类的所有属性，所有修改属性会在所有实例上反映出来，这明显是不好的，所以需要借助构造函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ary</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">23</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">ary</span>, s2.<span class="property">ary</span>);<span class="comment">//(3) [1, 2, 3] (3) [1, 2, 3]</span></span><br><span class="line">s1.<span class="property">ary</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">ary</span>, s2.<span class="property">ary</span>);<span class="comment">//(4) [1, 2, 3, 4] (4) [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><blockquote><p>数组增加后，在另外的实例上也体现了出来，但是有一点要记住，一般是操作才会导致这样的问题，如果是赋值或者重写，那么只是在某个实例上单独添加了一个属性而已，不会影响到别的</p></blockquote><h1 id="借用构造函数与组合式继承"><a href="#借用构造函数与组合式继承" class="headerlink" title="借用构造函数与组合式继承"></a>借用构造函数与组合式继承</h1><blockquote><p>通过 apply() 和 call() 的方式来显式的绑定执行构造函数的对象。可以在子类构造函数内部使用，并将 this 绑定到父类构造函数上，这样当实例对象通过子类构造函数创建时，就能获取到父类的所有属性，并且所有实例对象都有自己的副本。</p></blockquote><blockquote><p>设想之前是通过重写原型的方式来继承的，那么当一个父类实例对象被作为子类原型时，不管属性在父类里是普通属性还是原型属性，在子类这里统统被认为是原型，即所有实例对象都共享这些属性无论是普通的还是原型。那么这时我希望原本在父类里普通的属性在子类这里也能是普通的属性该怎么办？因为我希望原型作原型的继承，构造函数作构造函数的继承，而非都作为原型继承。</p></blockquote><blockquote><p>采用 call 或者 apply 的方式将父类的构造函数作为子类构造函数的普通一员，而原型的继承又另当别论。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ary</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Daughter</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="title class_">Daughter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="title class_">Daughter</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="title class_">Daughter</span>(<span class="number">23</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);<span class="comment">//Son &#123;age: 21, name: &quot;default&quot;, ary: Array(3)&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1);<span class="comment">//Daughter &#123;age: 23&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">23</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Daughter</span>(<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">s1.<span class="property">ary</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">ary</span>, s2.<span class="property">ary</span>);<span class="comment">//[1, 2, 3, 4] (3) [1, 2, 3]</span></span><br><span class="line">d1.<span class="property">ary</span>.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="property">ary</span>, d2.<span class="property">ary</span>);<span class="comment">//[1, 2, 3, 5] (4) [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><blockquote><p>通过对比可以看到，同样是继承父类，Daugther 只是以重写的方式继承了原型，本身构造函数没有父类构造函数的拷贝，而 Son 的实例明显有了父类构造函数实例的拷贝，并且可以自由修改数据不影响其他实例，而 Daughter 的实例修改数据就会影响到别的。</p></blockquote><blockquote><p><strong>其实上述代码就是组合式继承，原理很简单</strong></p></blockquote><ul><li>通过重写原型的方式来继承原型 -&gt; Son.prototype &#x3D; new Father()</li><li>通过借用构造函数的方式来继承父类的构造函数实例属性 -&gt; Father.call(this)</li><li>这样一来，他们既能继承并共享原型链上所有原型属性，又能获得每一个父类的构造函数实例属性的拷贝</li><li>当然在子类使用父类构造函数时也可以传递参数 -&gt; Father.call(this,name,age)</li><li>同样再提一下，子类重写原型意味着 constructor 属性将不会存在于子类原型中，使用时只能找到父类原型的 constructor ，这样可能让你得不到想要的结果，所以如果需要这个属性，那么请在重写原型时添加这个属性并指明它应该指向哪个构造函数。例如重写 Son 的原型时可以指定该属性指向 Son 构造函数 -&gt; constructor: Sons</li></ul><h1 id="原型式继承和寄生式继承"><a href="#原型式继承和寄生式继承" class="headerlink" title="原型式继承和寄生式继承"></a>原型式继承和寄生式继承</h1><blockquote><p>暂时跳过</p></blockquote><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><blockquote><p>之前的组合继承中其实不难发现一个问题，就是会出现两次调用父类构造函数的情况，第一次是重写子类原型的时候，第二次是子类构造函数调用父类构造函数的时候。所以引出了这种继承方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ary</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Link</span>(<span class="title class_">Son</span>,<span class="title class_">Father</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Link</span>(<span class="params">Son,Father</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  f.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="keyword">new</span> <span class="title function_">f</span>();</span><br><span class="line">  prototype.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">21</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">23</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">ary</span>, s2.<span class="property">ary</span>);<span class="comment">//(3) [1, 2, 3] (3) [1, 2, 3]</span></span><br><span class="line">s1.<span class="property">ary</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">ary</span>, s2.<span class="property">ary</span>);<span class="comment">//(4) [1, 2, 3, 4] (3) [1, 2, 3]</span></span><br></pre></td></tr></table></figure><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?c74f5b689637f77db7c8feff64beb26f";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在接触了作用域链，对象，构造函数，原型之后。就可以猜想，在解析属性时，对象可以像作用域链那样从自己开始一直找到原型，那么原型是否也可以层层嵌套，形成一个类似作用域链的东西，答案是肯定的&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面向对象的程序设计" scheme="https://greatiga.cn/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="继承" scheme="https://greatiga.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
    <category term="原型链" scheme="https://greatiga.cn/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>理解对象</title>
    <link href="https://greatiga.cn/2020/07/15/JavaScript/understandObject/"/>
    <id>https://greatiga.cn/2020/07/15/JavaScript/understandObject/</id>
    <published>2020-07-15T00:29:31.000Z</published>
    <updated>2020-07-20T14:09:49.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><blockquote><p>面向对象最常见的方式就是类，定义一个类之后，由它创建的对象都拥有从类继承而来的方法与属性。然而 JavaScript 里面，至少在 ES6 之前是没有 class的概念的。所以它的对象与传统类的对象还是有区别的。</p></blockquote><span id="more"></span><blockquote><p>Js 的对象可以说是一组无序值的集合，可以包括基本类型值、引用类型值、函数</p></blockquote><blockquote><p>通常采用字面量的方式或者 new Object() 的方式来创建；创建时除定义的值外，还具有一些特殊值，用来定义对象的各种行为。</p></blockquote><h2 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h2><blockquote><p>JS 规定了许多属性值用于给引擎使用，但是不能直接访问他们，通常用 [[Value]] 的方式放置</p></blockquote><h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><h3 id="四个值，用来描述行为"><a href="#四个值，用来描述行为" class="headerlink" title="四个值，用来描述行为"></a>四个值，用来描述行为</h3><ul><li>[[Configurable]]：能否用 delete 删除某个属性，是否可以修改属性的特性，能否改为访问器属性，字面量创建的对象默认值为 true</li><li>[[Enumerable]]：能否通过 for-in 遍历属性名字，默认为 true</li><li>[[Writable]]：能否直接修改某个属性的值，默认为 true</li><li>[[Value]]：读数据时从这读取，写入时放在这里，默认为 undefined</li></ul><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><blockquote><p>该方法可以设置上述的特殊值，接受三个参数，参数1 为要修改的对象，参数2 为修改的对象，参数3 可以指定多个特殊值的值</p></blockquote><ul><li>如果是对已有属性操作，则改变相应的特殊值就行</li><li>如果没有该属性，则认为是通过该方法添加新属性，此时应该显式的定义各项值，否则就会默认为 false</li></ul><p>看实例，允许直接通过该方法定义属性并直接指定对应的特殊值，若没指定的特殊值则按false ，要想让默认值为 true，需要用字面量或 new Object() 来创建</p><ul><li>修改 Writable 属性，在严格模式下， writable 值为false时，修改属性值会报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> great = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Great&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,<span class="comment">//设置 name 属性值不可修改</span></span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Greatiga&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>,great.<span class="property">name</span>);<span class="comment">//Great Greatiga</span></span><br><span class="line">x.<span class="property">name</span> = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">great.<span class="property">name</span> = <span class="string">&quot;no&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>,great.<span class="property">name</span>);<span class="comment">//yes Greatiga</span></span><br></pre></td></tr></table></figure><ul><li>修改 Configurable 属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> great = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,<span class="comment">//设置 name 属性值不可删除</span></span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Greatiga&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(great.<span class="property">name</span>);<span class="comment">//Greatiga</span></span><br><span class="line"><span class="keyword">delete</span> great.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(great.<span class="property">name</span>);<span class="comment">//Greatiga</span></span><br></pre></td></tr></table></figure><blockquote><p>但是，Configurable 属性一旦被定义为 false，就不能再变为 true 了，同时 Enumberable 属性也不可修改</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> great = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,<span class="comment">//设置 name 属性值不可删除,</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Greatiga&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//正常不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//Cannot redefine property: name</span></span><br><span class="line"><span class="comment">//   at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">//   at &lt;anonymous&gt;:6:8</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(great,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//Uncaught TypeError: Cannot redefine property: name</span></span><br><span class="line"><span class="comment">//  at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">//  at &lt;anonymous&gt;:11:8</span></span><br></pre></td></tr></table></figure><h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><blockquote><p>访问器属性只能通过 Object.defineProperty() 定义，通过字面量定义不是</p></blockquote><h3 id="四个值"><a href="#四个值" class="headerlink" title="四个值"></a>四个值</h3><ul><li>[[Configurable]]：能否用 delete 删除某个属性，是否可以修改属性的特性，能否改为访问器属性，字面量创建的对象默认值为 true</li><li>[[Enumerable]]：能否通过 for-in 遍历属性名字，默认为 true</li><li>[[Get]]：读取数据时调用的函数，默认为 undefined</li><li>[[Set]]：写入数据时调用的函数，默认为 undefined</li></ul><h3 id="Object-defineProperty-1"><a href="#Object-defineProperty-1" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><ul><li><p>但一个属性添加了 get 和 set 方法后，该属性就是一个访问器属性，读取时触发 get ，设置值时触发 set</p></li><li><p>set 指向了 setter方法，get 指向了 getter 方法</p></li><li><p>约定属性名前面加上 _ 作为私有变量，即外部不可以直接访问，需要通过 get 与 set 来访问，（事实上也是可以直接访问的，因为都是普通变量，但是既然约定，那么我们在编写我们的对象时，就应该遵守约定，哪些可以给外部看到，哪些对于外部隐藏）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Great</span> = &#123;</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Great</span>,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> += s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Great</span>.<span class="property">_age</span> = <span class="number">25</span>;<span class="comment">//同样可以通过直接访问属性改变值，但是不要这样，要遵守规定</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">age</span>)<span class="comment">//25</span></span><br><span class="line"><span class="title class_">Great</span>.<span class="property">age</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">age</span>)<span class="comment">//26</span></span><br></pre></td></tr></table></figure><blockquote><p>getter 与 setter 不一定都要定义，只定义了 get 表示只能读，反之表示只能写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Great</span> = &#123;</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Great</span>,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Great</span>.<span class="property">_age</span> = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">age</span>)<span class="comment">//25</span></span><br><span class="line"><span class="title class_">Great</span>.<span class="property">age</span> = <span class="number">21</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">age</span>)<span class="comment">//25 显然上面这一步没有赋值成功，因为没有定义 set</span></span><br></pre></td></tr></table></figure><blockquote><p>IE8 对 Object.defineProperty() 的实现并不全面，建议不要使用在这个版本</p></blockquote><h3 id="defineGetter-和-defineSetter"><a href="#defineGetter-和-defineSetter" class="headerlink" title="defineGetter 和 defineSetter"></a><strong>defineGetter</strong> 和 <strong>defineSetter</strong></h3><blockquote><p>另一种定义访问器属性的方式</p></blockquote><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Great</span> = &#123;</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Great</span>.<span class="title function_">__defineGetter__</span>(<span class="string">&quot;age&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="同时定义多个属性"><a href="#同时定义多个属性" class="headerlink" title="同时定义多个属性"></a>同时定义多个属性</h2><h3 id="Object-defineProperties-方法"><a href="#Object-defineProperties-方法" class="headerlink" title="Object.defineProperties() 方法"></a>Object.defineProperties() 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Great</span> = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="title class_">Great</span>,&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,<span class="comment">//允许修改另外两个属性，因为他们默认为 false</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Greatiga&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">_time</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,<span class="comment">//允许修改另外两个属性，因为他们默认为 false</span></span><br><span class="line">    <span class="attr">value</span>: <span class="number">2020</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,<span class="comment">//允许修改 set 和 get，因为他们默认为 false</span></span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_time</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">time</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_time</span> = time;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Great</span>.<span class="property">name</span> = <span class="string">&#x27;Link&#x27;</span>;</span><br><span class="line"><span class="title class_">Great</span>.<span class="property">time</span> = <span class="number">1999</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">name</span>,<span class="title class_">Great</span>.<span class="property">time</span>);<span class="comment">//Link 2020 </span></span><br><span class="line"><span class="comment">//很显然_time的值并未修改，因为默认都为 false，writable 为 false;所以不许修改其值</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="title class_">Great</span>,&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">//将此属性设为不可更改</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span> <span class="comment">//禁止遍历</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">_time</span>: &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//允许修改</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">//允许遍历</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//允许遍历</span></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">time</span>) &#123; <span class="comment">//重写 set 方法</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_time</span> = time + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Great</span>.<span class="property">name</span> = <span class="string">&quot;GG&quot;</span>;</span><br><span class="line"><span class="title class_">Great</span>.<span class="property">time</span> = <span class="number">1999</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Great</span>.<span class="property">name</span>,<span class="title class_">Great</span>.<span class="property">time</span>);<span class="comment">//Link 2009</span></span><br><span class="line"><span class="comment">//此时 _time 可以修改了，但是 name 被我们禁止修改了</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>警惕：</strong> 上面的例子中，如果一开始没有设置 configurable 为 true，那么后面的步骤除了修改 writable 以外，修改其他特殊属性以及重写 set 方法都会报错，因为这个 configurable 就是规定每个属性在第一次设置之后是否可以再次修改</p></blockquote><blockquote><p>Uncaught TypeError: Cannot redefine property: 属性名 -&gt; 这是通常的报错信息，表示不能重新定义特殊属性</p></blockquote><h2 id="获取对象属性的特殊属性值"><a href="#获取对象属性的特殊属性值" class="headerlink" title="获取对象属性的特殊属性值"></a>获取对象属性的特殊属性值</h2><h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><blockquote><p>接受两个参数，参数1位对象，参数2为属性值。返回一个对象，里面包括了之前介绍的各种 property 值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Great</span> = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="title class_">Great</span>,&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Greatiga&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">_time</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="number">2020</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_time</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> t1 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">Great</span>,<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">Great</span>,<span class="string">&#x27;time&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t1.<span class="property">writable</span>,t1.<span class="property">enumerable</span>,t1.<span class="property">set</span>);<span class="comment">//true false undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t2.<span class="property">writable</span>,t2.<span class="property">configurable</span>,<span class="keyword">typeof</span> t2.<span class="property">get</span>);<span class="comment">//undefined true &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>首先来看看数据属性与访问器属性是否可以同时定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(test,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//Uncaught TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute,</span></span><br></pre></td></tr></table></figure><blockquote><p>这样一看就明白了，数据属性是定义某个属性的读取写入功能的，而访问器属性则是用来间接读取写入对象中的属性</p></blockquote><blockquote><p><strong>所以这很像 公有变量与私有变量，如果要在对象中定义对外开放的变量，此时可以用数据属性来规定它，如果你想定义一个不对外公开的变量，就用访问器属性规定它</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;面向对象最常见的方式就是类，定义一个类之后，由它创建的对象都拥有从类继承而来的方法与属性。然而 JavaScript 里面，至少在 ES6 之前是没有 class的概念的。所以它的对象与传统类的对象还是有区别的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="面向对象的程序设计" scheme="https://greatiga.cn/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="引用类型" scheme="https://greatiga.cn/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="函数" scheme="https://greatiga.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>执行环境与作用域</title>
    <link href="https://greatiga.cn/2020/06/24/JavaScript/executionContext/"/>
    <id>https://greatiga.cn/2020/06/24/JavaScript/executionContext/</id>
    <published>2020-06-24T13:21:41.000Z</published>
    <updated>2020-07-14T08:19:38.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h1><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p><strong>简单一点说程序执行到哪，那一块所属的范围就是执行环境，在那一块范围内，变量又能访问哪些数据</strong></p><ul><li>执行环境定义了变量或函数有权访问的其他数据，并且每个执行环境都有一个变量对象，里面存了这个执行环境中定义的所有变量或函数</li><li>一般分为全局执行环境和局部执行环境，全局一般就是window（浏览器），局部就是函数内部</li><li>每个执行环境运行完，相应的变量对象及其中的变量和函数皆销毁。</li></ul><span id="more"></span><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>换个方向思考</p><ul><li><p>执行的过程中，解析器会遇到变量和函数，那么这些变量函数是哪定义的呢？要怎么找怎么确定？</p></li><li><p>是不是毫无顺序的乱找？</p></li></ul><p>看例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//ex1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;   <span class="comment">//ex2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//ex2</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> great = <span class="string">&#x27;yes&#x27;</span>;<span class="comment">//ex4</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b + great);<span class="comment">//ex4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">G</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span> <span class="comment">//ex3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">H</span>();<span class="comment">//ex1</span></span><br></pre></td></tr></table></figure><p>每一个执行环境都有一个变量对象，JS执行过程中，会将当前执行环境对应的对象压入栈中，完了就扔出去。</p><p>当执行到某一个环境时，会创建一个作用域链，这个链最前面是当前环境变量对象，最后面是全局环境变量对象</p><p>它只能从头，也就是本身的环境开始，一直往后面找直到找到为止.</p><p>比如：</p><ul><li>当在 ex2 中执行时，会生成一个作用域链: ex1 -&gt; ex2</li></ul><p>想找到变量a，就只能在 ex2 或者退到 ex1找，不允许进入 ex4，甚至是退到 ex1 又进到 ex3.因为作用域链就是这么规定的，</p><p><strong>到这里就应该知道，执行环境变量对象是为了存储当前执行环境的所有变量，而为了知道这些变量代表什么？哪来的？有没有创建过？就需要通过作用域链去找，去识别，这样执行环境中的变量才算完整</strong></p><h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><ul><li>try-catch语句块的catch块</li><li>with语句</li></ul><p>临时增加一个变量在作用域链顶端，但这个变量不是执行环境</p><p>就比如 执行环境1 -&gt; 执行环境2 -&gt; 变量</p><p>细看例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//ex1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;   <span class="comment">//ex2</span></span><br><span class="line">  <span class="title function_">with</span>(<span class="params">test</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = test + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c; <span class="comment">//ex2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">H</span>();<span class="comment">//ex1</span></span><br></pre></td></tr></table></figure><p>上述函数可以正确返回值，照理说应该不能啊，因为 with 语句里的东西外面访不到啊？</p><p>按作用域链规则来说确实不行，因为处在 ex2 的 return c 中的 c只能在ex2找，或者前后到 ex1，</p><p>但是记住作用域链是怎么找的？从最顶端开始~~，虽然执行是在 ex2，但是因为 with语句的作用就是临时增加一个变量对象在前面，开始找的时候就能找到</p><p>ex1 -&gt; ex2 -&gt; 变量c</p><p>所以这就是延长作用域链</p><h2 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h2><p>比如 if 、for 语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>像C语言，Java，这里的 i 在外面访问肯定不是 10，但是JS没有块级作用域，这里的 i 就在 for语句外的环境里。</p><blockquote><p>变量声明没有用var的话会被添加到全局环境中</p></blockquote><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>函数申明变量时标记为进入环境，当执行完该函数时标位离开环境，当垃圾回收例程开始时，回收标记为离开环境的变量所占内存空间</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>一个引用类型值赋给变量时，引用加1，同样的另一个变量也引用这个值则加1，反之曾经引用它的变量引用别的值是，它就减1</p><blockquote><p>存在循环引用的问题</p></blockquote><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>垃圾回收是按一定机制或者条件来触发的，太频繁一些长期需要的值会被重复创建，太慢又会积攒太多空间。</p><h3 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h3><p>前提：因为计算机分配给浏览器的资源没有计算机上的软件多，所以虽有自动垃圾回收机制，但也要在代码中尽可能合理利用空间</p><blockquote><p>将变量或对象设为 null ,在下次垃圾回收时会自动清除。适用大多数</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;执行环境及作用域&quot;&gt;&lt;a href=&quot;#执行环境及作用域&quot; class=&quot;headerlink&quot; title=&quot;执行环境及作用域&quot;&gt;&lt;/a&gt;执行环境及作用域&lt;/h1&gt;&lt;h2 id=&quot;执行环境&quot;&gt;&lt;a href=&quot;#执行环境&quot; class=&quot;headerlink&quot; title=&quot;执行环境&quot;&gt;&lt;/a&gt;执行环境&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;简单一点说程序执行到哪，那一块所属的范围就是执行环境，在那一块范围内，变量又能访问哪些数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行环境定义了变量或函数有权访问的其他数据，并且每个执行环境都有一个变量对象，里面存了这个执行环境中定义的所有变量或函数&lt;/li&gt;
&lt;li&gt;一般分为全局执行环境和局部执行环境，全局一般就是window（浏览器），局部就是函数内部&lt;/li&gt;
&lt;li&gt;每个执行环境运行完，相应的变量对象及其中的变量和函数皆销毁。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://greatiga.cn/categories/JavaScript/"/>
    
    
    <category term="作用域" scheme="https://greatiga.cn/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
    <category term="执行上下文" scheme="https://greatiga.cn/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    <category term="垃圾回收机制" scheme="https://greatiga.cn/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
</feed>
